---
- name: Copy install_files/securedrop-app-code dir to build path.
  synchronize:
    src: "{{ role_path }}/../../../securedrop-app-code/"
    dest: "{{ securedrop_app_code_deb_dir }}"
    delete: yes
    recursive: yes

- name: Copy app code to build directory.
  synchronize:
    src: "{{ role_path }}/../../../../securedrop/"
    dest: "{{ securedrop_code_filtered }}"
    recursive: yes
    delete: yes
    rsync_opts: "{{ securedrop_app_rsync_opts }}"

- include: sass.yml

- name: Install Debian packages required to build wheels
  apt:
    name:
      - apache2-dev
      - python3-dev
      - python3-pip
      - python3-wheel
    state: present

- name: Create pip wheel archive for Debian package requirements.
  shell: |
    pip3 wheel \
      --no-binary :all: \
      --require-hashes \
      --requirement {{ securedrop_pip_requirements }} \
      --wheel-dir {{ securedrop_wheelhouse }} 2>&1
  register: wheel_build_output
  tags: pip

- name: Ensure source hash sums matched at wheel build-time
  fail: msg="Source hash sum mismatch, build cannot continue."
  failed_when: "'THESE PACKAGES DO NOT MATCH THE HASHES' in wheel_build_output.stdout"

# Here we need to regenerate a new securedrop-app-code-requirements.txt file
# *without* hashes to bundle in the .deb package, for reasons that follow:
# If requirements hashes are in the requirments file, pip will automatically
# use hash checking mode to install the dependencies (which is done in postinst
# of securedrop-app-code package).
# dpkg-buildpackage modifies the wheel archive such that the hashes of those
# built wheels change. Since the deb package itself is signed (providing
# integrity, we can defer to a later time.
- name: Install built pip wheels for SecureDrop.
  shell: pip3 install {{ securedrop_wheelhouse }}/*.whl
  tags:
    - pip

- name: Create new requirements based on build/installed wheels without hashes
  shell:
    grep -v -e '--hash' -e '^\s*#' {{ securedrop_pip_requirements }} | awk '{print $1}' > {{ securedrop_pip_requirements_generated }}
  tags:
    - pip

- include: translations.yml

- name: Create apparmor.d directory in build path.
  file:
    state: directory
    dest: "{{ securedrop_app_code_deb_dir }}/etc/apparmor.d"
  tags: apparmor

- name: Copy AppArmor profiles to build path.
  copy:
    src: "{{ item }}"
    dest: "{{ securedrop_app_code_deb_dir }}/etc/apparmor.d/{{ item }}"
  with_items: "{{ apparmor_profiles }}"
  tags: apparmor

- name: Replace placeholder changelog to dist-specific changelog
  copy:
    src: "changelog-{{ securedrop_package_dist }}"
    dest: "{{ securedrop_app_code_deb_dir }}/debian/changelog"

- name: Build securedrop-app-code Debian package.
  command: dpkg-buildpackage -us -uc
  args:
    chdir: "{{ securedrop_app_code_deb_dir }}"

- name: Find newly built Debian package
  find:
    paths:
      - "{{ securedrop_app_code_deb_dir }}/../"
    patterns:
      - '*.deb'
  register: securedrop_deb_package_find_results

- name: Fetch newly built Debian packages back to localhost.
  fetch:
    src: "{{ item.path }}"
    dest: "{{ ossec_build_deb_package_local_dest_dir }}"
    flat: yes
    fail_on_missing: yes
  with_items: "{{ securedrop_deb_package_find_results.files }}"
